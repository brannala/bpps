{"version":3,"sources":["DisplaySeqs.js","GetFile.js","Sequences.js","MapFunctions.js","DisplayMatchedSeqs.js","DisplayUnmatchedSeqs.js","DisplayFilters.js","MapFile.js","FormatSeqs.js","SeqRead.js","CtrlFunc.js","PriorFunc.js","CreateControlFile.js","CtrlFileOptions.js","Trees.js","CtrlFile.js","Main.js","index.js"],"names":["DisplaySeqs","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","readOnly","wrap","value","locusText","Component","GetFile","_this","uploadFile","_ref","asyncToGenerator","regenerator_default","mark","_callee","event","fileList","latestUploadedFile","fileContents","_context","prev","next","persist","target","files","abrupt","setState","waitingForFileUpload","item","length","readUploadedFileAsText","sent","uploadedFileContents","readFile","name","fileType","initPosInLocusArray","t0","console","log","stop","_x","apply","arguments","state","_this2","accept","multiple","onChange","e","type","React","inputFile","temporaryFileReader","FileReader","Promise","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","Sequences","posInLocusArray","bind","assertThisInitialized","handleScanClickUp","handleScanClickDown","locusArray","src_GetFile","src_DisplaySeqs_0","onClick","undefined","locusCounts","noseqs","nosites","uniqueSeqNames","sequenceData","allNames","i","j","sequences","push","seqname","toConsumableArray","Set","DisplayMatchedSeqs","getMatchedAsString","matched","seqMatches","matchedSeqs","seqNames","spName","trim","DisplayUnmatchedSeqs","unMatchedVec","unmatched","getUnmatchedAsString","unmatchedSeqs","DisplayFilters","createFilters","key","text","filterItems","filters","map","FileSaver","require","MapIsDone","mapDone","mapFileName","seqFileName","substr","indexOf","mapFileText","rExp","RegExp","mapData","match","Error","specimenID","specimen","err","alert","createMapFileText","blob","Blob","saveAs","MapFile","uniqSeqs","regExp_SpName","addFilter","regExp_SpN","seqMc","filterArray","uniq","_spNameInput","_regExpInput","unshift","Date","now","reg_exp","uniqueNames","sqToSN","_loop","matches","filter","v","index","splice","seqToSpecName","regExp_SpNames","preventDefault","concat","Columns","gutters","stackMaxWidth","size","src_DisplayUnmatchedSeqs","onSubmit","placeholder","ref","src_DisplayFilters","siz","src_DisplayMatchedSeqs","href","formatSeqs","seqData","lociSummary","getLocus","getCounts","locusNo","sData","seq","longestName","sort","b","padName","longName","currName","newName","diff","SeqRead","input","specs","modInput","errorResult","error","split","replace","Number","sname","checkResult","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","loci","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","seqs","error_message","return","checkSequences","MapFileUpload","style","padding","ParseMapText","Map","breakDelimVec","labelPair","set","message","getSpeciesList","spNameList","values","isSpName","seqName","get","getMaxNumberSeqs","seqMaxCount","locus","sequenceCount","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","getSpecimen","getSeqBySpecies","speciesList","seqBySpec","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","l","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","species","seqsEmpty","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","pairwiseDistance","seq1","seq2","p2Dist","siteMismatchProb","site1","site2","missingData","add","has","avgDistance","sumDist","priorFromSeqs","priorMeanTheta","totalSpecies","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","priorTheta","priorTau","maxDist","combinedSeqs","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","allSeqs","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_i","k","maxDistance","CreateControlFile","controlFileName","namePrefix","ctrlFileOpts","numberSeqs","nTree","priors","controlFileText","nloci","speciesDelim","speciesTreeInf","diploid","toPrecision","burnin","sampleFreq","mcmcSamples","createControlFileText","downLoadButton","CtrlFileOptions","Checkbox","assign","checked","handleSpecDelimCheckbox","handleSpecTreeInfCheckbox","handleDiploidCheckbox","handleBurninSet","min","handleSampleFreqSet","handleMcmcSamples","newickFromTree","tNode","treeSt","newick","recurseTree","newickSt","currNode","left","right","minNode","father","treeArray","tArray","CtrlFile","seqBySpecies","handleMapFileRead","fileName","nT","speciesNames","treeList","tRoot","x","Math","floor","random","randomTree","numSeqs","cFO","objectSpread","src_CtrlFileOptions","src_CreateControlFile","Main","seqFiletext","currentText","parseResult","_this3","HashRouter","NavLink","to","Route","exact","path","render","src_Sequences","src_MapFile","src_CtrlFile_0","ReactDOM","src_Main","document","getElementById"],"mappings":"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","file":"static/js/main.47ce0aa4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './DisplaySeqs.css';\n\nclass  DisplaySeqs extends Component {\n    constructor(props) {\n        super(props);\n    }\n    \n    render() {\n        return (\n            <div className=\"seqview2\">\n              <textarea readOnly wrap='off' className='seq-box' value={this.props.locusText} />\n            </div>\n        );\n    }\n}\n    \nexport default DisplaySeqs;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass GetFile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            uploadedFileContents: null,\n            waitingForFileUpload: false\n        };\n    }\n    \n    static readUploadedFileAsText = inputFile => {\n        const temporaryFileReader = new FileReader();\n        \n        return new Promise((resolve, reject) => {\n            temporaryFileReader.onerror = () => {\n                temporaryFileReader.abort();\n                reject(new DOMException(\"Problem parsing input file.\"));\n            };\n            \n            temporaryFileReader.onload = () => {\n                resolve(temporaryFileReader.result);\n            };\n            temporaryFileReader.readAsText(inputFile);\n        });\n    };\n    \n    uploadFile = async event => {\n        event.persist();\n        if (!event.target || !event.target.files) {\n            return;\n        }\n        \n        this.setState({ waitingForFileUpload: true });\n        const fileList = event.target.files;\n        // Uploads will push to the file input's `.files` array. Get the last uploaded file.\n        const latestUploadedFile = fileList.item(fileList.length - 1);\n        try {\n            const fileContents = await GetFile.readUploadedFileAsText(latestUploadedFile);\n            this.setState({\n                uploadedFileContents: fileContents,\n                waitingForFileUpload: false });\n            this.props.readFile(fileContents,fileList[0].name);\n            if(this.props.fileType === \"sequence\")\n                this.props.initPosInLocusArray();\n        } catch (e) {\n            console.log(e);\n            this.setState({\n                waitingForFileUpload: false\n            });\n        }\n    };\n    \n    render() {\n        return (\n            <div className='read-seqs'>\n              <input\n                accept='.txt'\n                multiple\n                onChange={e => this.uploadFile(e)}\n                type=\"file\"\n              />\n            </div>\n        );\n    }\n}\n\nexport default GetFile;\n","import React, { Component } from \"react\";\nimport './DisplaySeqs.css';\nimport DisplaySeqs from \"./DisplaySeqs\";\nimport GetFile from \"./GetFile\";\n\nclass Sequences extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { posInLocusArray: 0 };\n        this.initPosInLocusArray = this.initPosInLocusArray.bind(this);\n        this.handleScanClickUp = this.handleScanClickUp.bind(this);                                                                  \n        this.handleScanClickDown = this.handleScanClickDown.bind(this);                                                              \n    }\n    // callback passed to GetSeqFile. Set posInLocusArray to 0 when new file is read.\n    initPosInLocusArray() { this.setState(()=>({ posInLocusArray: 0 })); };  \n    // callback increments posInLocusArray index when + button pressed.\n    handleScanClickUp(e)                                                                                                             \n    {                                                                                                                                \n        if(this.state.posInLocusArray < this.props.locusArray.length-1)                                                                      \n        {                                                                                                                            \n            this.setState(()=>({ posInLocusArray: this.state.posInLocusArray + 1 }));                                                                \n        }                                                                                                                            \n    }                                                                                                                                \n    // callback decrements  posInLocusArray index when - button pressed.\n    handleScanClickDown(e)                                                                                                           \n    {                                                                                                                                \n        if(this.state.posInLocusArray > 0)                                                                                                \n        {                                                                                                                            \n            this.setState({ posInLocusArray: this.state.posInLocusArray-1 });                                                  \n        }                                                                                                                            \n    }                                                                                                                                \n\n    render() {\n        return (\n            <div>\n              <div className=\"seqview\">\n                <h2>Step 1:</h2>\n                <p>Upload a file containing DNA sequences in bpp format.</p>\n                <GetFile readFile={this.props.readFile} initPosInLocusArray={this.initPosInLocusArray} fileType={\"sequence\"}/>\n                <DisplaySeqs locusText={this.props.locusArray[this.state.posInLocusArray]} />\n                <div><button onClick={this.handleScanClickDown}> - </button>                                                           \n                  <button onClick={this.handleScanClickUp}> + </button>                                                         \n                  <span className=\"counts\">Locus: {this.props.locusArray.length>0 ? this.state.posInLocusArray + 1 : \" 0 \"} / {this.props.locusArray.length}</span>\n                  <span className=\"counts\">NoSeqs: {(this.props.locusCounts!==undefined)&&(this.props.locusCounts.length!==0) ?\n                                                    this.props.locusCounts[this.state.posInLocusArray].noseqs : \" 0 \"}</span>\n                  <span className=\"counts\"> NoSites: {(this.props.locusCounts!==undefined)&&(this.props.locusCounts.length!==0) ?\n                                                      this.props.locusCounts[this.state.posInLocusArray].nosites : \" 0 \"}</span>\n                </div>\n              </div>\n              <div className=\"quick-start\">\n                <p>Quick start: Choose a file with aligned sequences at one or more loci in bpp format (non-interleaved).\n                  The bpp format is a text file with a series of one or more loci arranged sequentially. a description of\n                  the bpp sequence data file format (and example) are found here.  Once the data are successfully\n                  uploaded continue to step 2 (create map file).</p>\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default Sequences;\n\n","// functions for creating map file\n\n// returns vector of unique sequence names that is a subset of all sequence names\nfunction uniqueSeqNames(sequenceData)\n{\n    if(sequenceData.length>0)\n    {\n        const allNames = [];\n        for(let i in sequenceData)\n            for(let j in sequenceData[i].sequences)\n                allNames.push(sequenceData[i].sequences[j].seqname);\n        return [...new Set(allNames)];\n    }\n    else\n        return [];\n}\n\n// returns vector of objects: each a  list of sequences filtered by a reg_exp, the reg_exp, and a species name \nfunction seqToSpecName(uniqueNames,regExp_SpName)\n{\n    const sqToSN = [];\n    let unmatched = uniqueNames;\n    for(let i in regExp_SpName)\n    {\n        let matches = unmatched.filter((v) => v.match(regExp_SpName[i].reg_exp));\n        for(let j in matches)\n        {\n            let index=unmatched.indexOf(matches[j]);\n            if(index > -1)\n                unmatched.splice(index,1);\n        }\n        sqToSN.push({seqNames: matches, reg_exp: regExp_SpName[i].reg_exp, spName: regExp_SpName[i].spName});\n    }\n    return { matchedSeqs: sqToSN, unmatchedSeqs: unmatched };\n}\n// returns a formatted string for creating map file\nfunction createMapFileText(seqMatches)\n{\n    let mapFileText = \"\";\n    let rExp = new RegExp('.*\\^.+');\n    let mapData = [];\n    try{\n\tif(seqMatches.matchedSeqs.length>0)\n\t{\n\t    for(let i in seqMatches.matchedSeqs)\n\t\tfor(let j in seqMatches.matchedSeqs[i].seqNames)\n\t\t    if(seqMatches.matchedSeqs[i].seqNames[j].match(rExp)===null)\n\t\t        throw new Error(\"sequence labels must be of format IDName^SpecimenName. Sequence name was missing ^ !\"); \n            \n            // get mapData as spName +  specimen IDs\n\t    for(let i in seqMatches.matchedSeqs)\n            {\n                let specimenID = [];\n                for(let j in seqMatches.matchedSeqs[i].seqNames)\n                    specimenID.push(seqMatches.matchedSeqs[i].seqNames[j].substr(seqMatches.matchedSeqs[i].seqNames[j].indexOf('^')+1,));\n                \n                specimenID = [...new Set(specimenID)];\n                mapData.push({specimen: specimenID, spName: seqMatches.matchedSeqs[i].spName});\n            }\n            console.log(mapData[0].specimen[2]);\n            for(let i in mapData)\n                for(let j in mapData[i].specimen)\n\t\t    mapFileText += mapData[i].specimen[j] + \"  \" + mapData[i].spName + \"\\n\";\n            console.log(mapFileText);\n        }\n    }\n    catch(err) { alert(err); }\n    return mapFileText;\n}\n\n\nexport { uniqueSeqNames, seqToSpecName, createMapFileText }\n","import React, { Component } from \"react\";\nimport \"./Mapfile.css\";\n\nclass DisplayMatchedSeqs extends Component {\n    constructor(props) {\n        super(props);\n        this.getMatchedAsString = this.getMatchedAsString.bind(this); \n    }\n    // creates a string for each sequence name + species name match for display    \n    getMatchedAsString()\n    {\n        let matched = \"\";\n        if(this.props.seqMatches.matchedSeqs.length>0)\n        {\n            for(let i=0; i < this.props.seqMatches.matchedSeqs.length; i++)\n                for(let j=0; j < this.props.seqMatches.matchedSeqs[i].seqNames.length; j++)\n            {\n                matched += (this.props.seqMatches.matchedSeqs[i].seqNames[j] + \" = \" + this.props.seqMatches.matchedSeqs[i].spName + \"\\n\");\n            } \n        } \n        return matched.trim();\n    }\n\n    render() {\n        return (\n            <div>\n              <div className=\"title\">\n                <p>Sequence name =  species name </p>                     \n              </div>\n              <div className=\"col3\">\n                <textarea className=\"text-mapped\" value={this.getMatchedAsString()}></textarea>\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default DisplayMatchedSeqs;\n","import React, { Component } from \"react\";\nimport \"./Mapfile.css\";\n\nclass DisplayUnmatchedSeqs extends Component {\n    constructor(props) {\n        super(props);\n    }\n// creates a formatted string of unmatched sequences from vector unMatchedVec for display\n    getUnmatchedAsString(unMatchedVec)\n    {\n        let unmatched = \"\";\n        if(unMatchedVec.length>0)\n        {\n            for(let i in unMatchedVec)\n                unmatched += (unMatchedVec[i] + \"\\n\");\n        }\n        return unmatched.trim();\n    }\n    \n    render() {\n        return (\n            <div>\n              <div className=\"title\">\n                <p>Sequences names</p>\n              </div>\n              <div className=\"col2\">\n                <textarea className=\"text-unmapped\" value={this.getUnmatchedAsString(this.props.seqMatches.unmatchedSeqs)}></textarea>\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default DisplayUnmatchedSeqs;\n","import React, { Component } from \"react\";\nimport \"./Mapfile.css\";\n\nclass DisplayFilters extends Component {\n    constructor(props) {\n        super(props);\n        this.createFilters = this.createFilters.bind(this);\n    }\n    // formats a filter item as html list element <dl>item</dl> for display\n    createFilters(item)\n    {\n        return <dl key = {item.key} >{item.text}</dl>\n    }\n    \n    render() {\n        let filterList = this.props.filters;\n        let filterItems = filterList.map(this.createFilters);\n        return (\n            <div>\n              <div className=\"map-box\" >\n                <ul>\n                  {filterItems}\n                </ul>\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default DisplayFilters;\n","import React, { Component } from \"react\";\nimport MapFunctions, { uniqueSeqNames, seqToSpecName, createMapFileText } from \"./MapFunctions\";\nimport { Columns, Column } from 'react-flex-columns';\nimport \"./Mapfile.css\";\nimport DisplayMatchedSeqs from \"./DisplayMatchedSeqs\";\nimport DisplayUnmatchedSeqs from \"./DisplayUnmatchedSeqs\";\nimport DisplayFilters from \"./DisplayFilters\";\n// import DownLoadFile from \"./DownLoadFile\";\nvar FileSaver = require('file-saver');\n\nfunction MapIsDone(props)\n{\n    const isDone = props.mapDone;\n    if(props.mapDone)\n    {\n        let mapFileName = props.seqFileName.substr(0,props.seqFileName.indexOf('.'));\n        if(mapFileName===\"\")\n            mapFileName = props.seqFileName + \"map.txt\";\n        else\n            mapFileName = mapFileName + \"map.txt\";\n\tlet text = createMapFileText(props.seqMatches);\n\tvar blob = new Blob([text],{type: \"text/plain;charset=utf-8\"});\n\tlet downloadClick = (e) => { FileSaver.saveAs(blob,mapFileName); }\n\treturn (\n\t    <div className=\"downloadFile\">\n\t      <label>Map file is ready for download: </label><button className=\"downButton\" onClick={downloadClick}>Download</button>\n\t    </div>\n\t);\n    }\n    else\n        return (\n\t    <div className=\"downloadFile\">\n\t      <p>Sequence names must be completely filtered before map file can be downloaded.</p>\t      \n\t    </div>\n\t);\n}\n\nclass MapFile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { seqMatches: {matchedSeqs: [],  unmatchedSeqs: uniqueSeqNames(this.props.sequenceData)},\n                       uniqSeqs: uniqueSeqNames(this.props.sequenceData), regExp_SpName: [], filters: [], mapDone: false };\n        this.addFilter = this.addFilter.bind(this);\n\n    }\n    \n    // adds a new filter (filter = \"species + regex\" for display, regExp_SpName for filtering) and updates seqMatches object with new filter added\n    addFilter(e) {\n        \n        const regExp_SpN = this.state.regExp_SpName;\n        let rExp, seqMc = this.state.seqMatches, filterArray = this.state.filters;\n        const uniq = [];\n        for(let i in this.state.uniqSeqs)\n            uniq.push(this.state.uniqSeqs[i]);\n        \n        if((this._spNameInput.value !== \"\")&&(this._regExpInput.value !== \"\"))\n        {\n            filterArray.unshift({ text: this._spNameInput.value + \" + \" + this._regExpInput.value, key: Date.now()});\n            try\n            {\n                rExp = new RegExp(this._regExpInput.value);\n                regExp_SpN.push({ reg_exp: rExp, spName: this._spNameInput.value });\n                seqMc = seqToSpecName(uniq,regExp_SpN);\n                this.setState({ filters: filterArray });\n                this.setState({ regExp_SpNames: regExp_SpN });\n                this.setState({ seqMatches: seqMc });\n                    e.preventDefault();\n            }\n            catch(e) { alert(`warning! invalid regular expression syntax: ${this._regExpInput.value}`); }                               \n\n            if((seqMc.matchedSeqs.length>0)&&(seqMc.unmatchedSeqs.length===0))\n                this.setState({ mapDone: true}); \n        }\n        this._spNameInput.value = \"\";\n        this._regExpInput.value = \"\";\n    }\n\n    \n    render() {\n        return (\n            <div>\n              <div className=\"mapfile-box\">\n                <h2>Step 2:</h2>\n                <p>Create a map file in bpp format. Use regular expressions to associate sequence names with species names.</p>\n                <Columns gutters stackMaxWidth={700}>\n                  <Column size={10}>\n                    <DisplayUnmatchedSeqs seqMatches={this.state.seqMatches}/>\n                  </Column>\n                  <Column size={21}>\n                    <div className=\"title\">\n                      <p>Enter species name + regular expression</p>\n                    </div>\n                    <div className=\"col1\">\n                      <form onSubmit={this.addFilter}>\n                        <input placeholder=\"species name\" ref = {(a) => this._spNameInput = a}/>  +  <input placeholder=\"regular expression\" ref = {(a) => this._regExpInput = a}/>\n                        <button type=\"submit\" className=\"smallButton\">add</button>\n                      </form>\n                    </div>\n                    <DisplayFilters filters={this.state.filters}/>\n                  </Column>\n                  <Column siz={20}>\n                    <DisplayMatchedSeqs seqMatches={this.state.seqMatches}/>\n                  </Column>\n                </Columns>\n              </div>\n              <div>\n                <MapIsDone mapDone={this.state.mapDone} seqMatches={this.state.seqMatches} seqFileName={this.props.seqFileName}/>\n              </div>\n              <div className=\"quick-start\"><p>Quick start: Enter species name in left box (e.g., Homo_sapiens)\n                                             and a regular expression (RegExp) in right box to filter sequences. For example,\n                                             /.*(Hsap).*/ finds sequence labels containing the substring \"Hsap\" (e.g., ^Hsap12 or MyHsapiens)\n                                             but ignores a label such as H.sap. An online RegExp tester is found <a href=\"https://regexr.com\">here</a>.</p></div>\n            </div>\n        );\n    }\n}\n\nexport default MapFile;\n","// functions that summarizing sequences for display\n\n// create a vector with a string for each locus used to display sequence data\nfunction formatSeqs(seqData)\n{\n    const lociSummary = [];\n    let i;\n    for(i in seqData)\n        lociSummary.push(getLocus(i,seqData));\n    return lociSummary;\n}\n\n// create a vector of objects with noseqs and nosites used for display \nfunction getCounts(seqData)\n{\n    const locusCounts = [];\n    for(let i in seqData)\n        locusCounts.push({noseqs: seqData[i].noseqs, nosites: seqData[i].nosites});\n    return(locusCounts);\n}\n\n// create a formatted string of seqNames and sequences to display sequence data\nfunction getLocus(locusNo,seqData)\n{\n    // create copy of seqData to sort in place\n    const sData = {noseqs: seqData[locusNo].noseqs, nosites: seqData[locusNo].nosites, sequences: []};                                                              \n        for(let j in seqData[locusNo].sequences)\n            sData.sequences.push({seq: seqData[locusNo].sequences[j].seq, seqname: seqData[locusNo].sequences[j].seqname});                 \n    // finds longest sequence name\n    const longestName = sData.sequences.sort(function (a, b) { return b.seqname.length - a.seqname.length; })[0].seqname;\n    // pad a name with whitespace until its length equals longestName\n    const padName = (longName, currName) => { let newName=currName; let diff=longName.length - currName.length; for(let i=1; i<=diff; i++) newName += \" \"; return (newName); };\n    // create a text string for displaying locus\n    let text=\"\";\n    for(let i=0; i< seqData[locusNo].sequences.length; i++)\n    {\n        text += (padName(longestName,seqData[locusNo].sequences[i].seqname) + \"  \" + seqData[locusNo].sequences[i].seq );\n        if(i !== seqData[locusNo].sequences.length -1)\n            text += \"\\n\";\n    }\n    return text;\n} \n\nexport {formatSeqs, getCounts}\n","// parses text in bpp format to create sequenceData object\n\nfunction SeqRead(input) {\n\n    let specs; \n    let modInput;\n    const sequenceData = [];\n    let locusNo = 0;\n    \n    const errorResult = (err) => { return { sequenceData: [], error: `error: unexpected input: ${err}` }; };\n    // check for correct number of sites in each sequence \n    function checkSequences(sData) {\n        for(let loci of sData)\n            for(let seqs of loci.sequences)\n                if(Number(loci.nosites) !== seqs.seq.length)\n                    return {error: true, error_message: `expected ${loci.nosites} sites in sequence ${seqs.seqname} but observed ${seqs.seq.length} sites`}; \n        return {error: false};\n    };\n    \n    modInput = input.trim();  //remove whitespace from ends of string\n    while(modInput.length>0)\n    {\n        specs=modInput.split(/\\s+/,2);  // get noseqs and nosites \n        if((specs[0].match(/[^\\d]+/)!==null)||(specs[1].match(/[^\\d]+/)!==null)) // if not numbers throw error\n            return errorResult(`missing number of sequences (or sites) at locus ${locusNo+1}` );\n        modInput = (modInput.replace(/\\d+\\s+\\d+/,\"\")).trim(); // trim off noseqs and nosites\n        sequenceData.push({noseqs: specs[0], nosites: specs[1], sequences: []});\n        for(let i = 0; i < Number(specs[0]); i++)\n        {\n            let sname,seq;\n            sname=modInput.split(/\\s+/,1);  // extract sequence name\n            if((sname[0]===null)||(sname[0].match(/[^/d+].*/)===null))\n                return errorResult(`unexpected input at locus ${locusNo+1} near ${sname}`);\n            modInput = (modInput.replace(/[^\\d][^\\s]+/,\"\")).trim(); // trim off sequence name\n            seq=modInput.split(/\\n|\\r/,1);  //extract sequence\n            if(seq[0]===null)\n                return errorResult(`missing sequence at locus ${locusNo+1}`);\n            seq[0] = seq[0].replace(/\\s/g,''); // remove whitespace from interveaved sequences\n            if(seq[0].match(/[\\d]+/)!==null)\n            {\n                return errorResult(`sequence ${i+1} at locus ${locusNo+1} contains a number!`);\n            }\n            sequenceData[locusNo].sequences.push({seqname: sname[0], seq: seq[0]});\n            if(modInput.match(/(\\n|\\r)+/)===null)\n                modInput=modInput.replace(/.*/,\"\");  // trim off sequence\n            else\n                modInput = (modInput.replace(/.*(\\n|\\r)/,\"\")).trim(); //trim off last sequence in input file\n        } \n        locusNo++;\n    }\n    let checkResult = checkSequences(sequenceData);\n    if(checkResult.error)\n        return errorResult(checkResult.error_message);\n    else\n        return {sequenceData: sequenceData, error: null};\n}\n\nexport default SeqRead;\n","import React from \"react\"\nimport GetFile from \"./GetFile\"\n\nfunction MapFileUpload(props) {\n    let upLoadStyle = {padding: 20};\n    if(props.sequenceData.length > 0)\n    {\n        return (\n            <div style={upLoadStyle}>\n              <p>Upload a map file to continue</p>\n              <GetFile readFile={props.readFile} fileType={\"map\"}/>\n            </div>\n        );\n    }\n    else\n    {\n        return (\n            <p>Go to step 1 and upload sequence data to begin.</p>\n        );\n    }\n}\n\nfunction ParseMapText(text)\n{\n    const mapData = new Map();\n    \n    try{\n        let breakDelimVec = text.trim().split(\"\\n\");\n        if(breakDelimVec.length>0)\n        {\n            for(let pair of breakDelimVec)\n            {\n                let labelPair=pair.trim().split(/\\s+/g);\n                if(labelPair.length===2)\n                    mapData.set(labelPair[0],labelPair[1]);\n                else\n                    throw new Error(`map file syntax error at: ${labelPair[0]}`); \n            }\n        }\n        else\n            throw new Error(\"Empty map file!\");\n    return mapData;\n    }\n    catch(err){ alert(`Error: ${err.message}`); return [];} \n};\n\nfunction getSpeciesList(mapData)\n{\n    const spNameList = [...mapData.values()];\n    const UniquespNameList = [...new Set(spNameList)];\n    return UniquespNameList;\n}\n\n\n\nexport { ParseMapText, MapFileUpload, getSpeciesList }\n","function isSpName(seqName,spName,mapData)\n{\n    if(mapData.get(seqName)===spName)\n        return true;\n    return false;\n}\n\nfunction getNumberSeqs(spName,mapData)\n{\n    let noSeqs=0;\n    for(let species of mapData.values())\n        if(species === spName) noSeqs++;\n    return noSeqs;\n}\n\nfunction getMaxNumberSeqs(spName,sequenceData,mapData)\n{\n    let seqMaxCount = 0;\n    for(let locus of sequenceData)\n    {\n        let sequenceCount=0;\n        for(let sequences of locus.sequences)\n            if(isSpName(getSpecimen(sequences.seqname),spName,mapData))\n                sequenceCount++;\n        if(sequenceCount > seqMaxCount)\n            seqMaxCount = sequenceCount;\n    }\n    return seqMaxCount;\n}\n\nfunction getSpecimen(seqName)\n{\n    return seqName.substr(seqName.indexOf('^')+1);\n}\n\nfunction getSeqBySpecies (sequenceData,speciesList,mapData) {\n    const seqBySpec=[];\n    for(let locus of sequenceData)\n        seqBySpec.push([]);\n    let l=0;\n    for(let locus of sequenceData)\n    {\n        for(let species of speciesList)\n        {\n            let seqs = [];\n            let seqsEmpty=true;\n            for(let sequences of locus.sequences)\n            {\n//                console.log(mapData[getSpecimen(sequences.seqname)]+ \" \" + species);\n                if(isSpName(getSpecimen(sequences.seqname),species,mapData))\n                {\n                    seqs.push(sequences.seq); seqsEmpty=false;\n//                    console.log(getSpecimen(sequences.seqname) + \" \" + species); \n                }\n            }\n            if(!seqsEmpty)\n                seqBySpec[l].push(seqs); \n        }\n        l++;\n    }\n        return seqBySpec;\n}\n\nfunction pairwiseDistance(seq1,seq2)\n{\n    let p2Dist = 0.0;\n    for(let i in seq1)\n        p2Dist += siteMismatchProb(seq1[i],seq2[i]);\n    return p2Dist/seq1.length;\n};\n\nfunction siteMismatchProb(site1,site2)\n{\n    const missingData = new Set();\n    missingData.add('-');\n    missingData.add('?');\n    if(site1 != site2)\n        if(!missingData.has(site1)&&!missingData.has(site2))\n            return 1;\n    return 0;\n}\n\n\nfunction avgDistance(sequences)\n{\n    let sumDist=0.0;\n    if(sequences.length <= 1)\n        return 0;\n    for(let i=0; i < (sequences.length-1); i++)\n        for (let j=i+1; j < sequences.length; j++)\n    {\n        sumDist += pairwiseDistance(sequences[i],sequences[j]);\n    }\n    return (2.0*sumDist)/(sequences.length*(sequences.length-1));\n}\n\nfunction maxDistance(sequences)\n{\n    let maxDist=0.0;\n    let combinedSeqs = [];\n    for(let locus of sequences)\n    {\n        let allSeqs=[];\n        for(let seqs of locus)\n            allSeqs = allSeqs.concat(seqs);\n        combinedSeqs.push(allSeqs);\n    }\n //   console.log(combinedSeqs);\n    for(let locus of combinedSeqs)\n        for(let k=0; k < (locus.length - 1); k++)\n            for(let j=k; j < locus.length; j++)\n                if(pairwiseDistance(locus[k],locus[j]) > maxDist)\n                    maxDist = pairwiseDistance(locus[k],locus[j]);\n    return maxDist;\n}\n\nfunction priorFromSeqs(sequences)\n{\n    let priorMeanTheta=0;\n    let priorRootAge=0;\n    let totalSpecies=0;\n    for(let locus of sequences)\n    {\n        totalSpecies += locus.length;\n        for(let species of locus)\n            priorMeanTheta += avgDistance(species);\n    }\n    priorMeanTheta = priorMeanTheta/totalSpecies;\n    priorRootAge=maxDistance(sequences);\n    const priorTheta = { a: 3.0, b: priorMeanTheta*2.0 }\n    const priorTau = { a: 3.0, b:priorRootAge*2.0 }\n    return { priorTheta: priorTheta, priorTau: priorTau }; \n}\n\n\nexport { getSeqBySpecies, pairwiseDistance, avgDistance, priorFromSeqs, maxDistance, getNumberSeqs, getMaxNumberSeqs }\n","import React, { Component } from 'react';\nvar FileSaver = require('file-saver');\n\n\nfunction createControlFileText(seqFileName,mapFileName,mapData,seqData,speciesList,ctrlFileOpts,numberSeqs,nTree,priors) {\n\n    let controlFileText = \"\";\n    let nloci = seqData.length;\n    \n    controlFileText += \"    seed = -1 \\n\";\n    controlFileText += `    seqfile = ${seqFileName} \\n`;\n    controlFileText += `    Imapfile = ${mapFileName} \\n`; \n    controlFileText += \"    outfile = out.txt \\n    mcmcfile = mcmc.txt \\n\\n\";\n    controlFileText += `    speciesdelimitation = ${Number(ctrlFileOpts.speciesDelim)} \\n`;\n    controlFileText += `    speciestree = ${Number(ctrlFileOpts.speciesTreeInf)} \\n`;\n    controlFileText += `    species&tree = ${speciesList.length}  `;\n    for(let i in speciesList)\n        controlFileText += `${speciesList[i]}  `;\n    controlFileText += \"\\n                      \";\n    controlFileText += numberSeqs;\n    controlFileText += \"\\n\";\n    controlFileText += `                    ${nTree}; \\n`;\n    controlFileText += \"    diploid = \";\n    for(let i in speciesList)\n        controlFileText += ` ${Number(ctrlFileOpts.diploid)}`;\n    controlFileText += \"\\n\";\n    controlFileText += \"    cleandata = 0\\n\";\n    controlFileText += \"    usedata = 1\\n\";    \n    controlFileText += `    nloci = ${nloci}  \\n`;\n    controlFileText += `    thetaprior = ${priors.priorTheta.a}  ${priors.priorTheta.b.toPrecision(2)} \\n`; \n    controlFileText += `    tauprior = ${priors.priorTau.a}  ${priors.priorTau.b.toPrecision(2)} \\n`; \n\n    controlFileText += \"    finetune = 1: 0.02 0.02 0.02 0.02 0.02 0.02 0.02 \\n\";\n    controlFileText += \"    print = 1 0 0 \\n\";\n    controlFileText += `    burnin = ${ctrlFileOpts.burnin} \\n`;\n    controlFileText += `    sampfreq = ${ctrlFileOpts.sampleFreq} \\n`;\n    controlFileText += `    nsample = ${ctrlFileOpts.mcmcSamples} \\n`;\n    return controlFileText;\n}\n\n\nclass CreateControlFile extends Component {\n\n\n    render() {\n        let controlFileName = \"\";\n//        console.log(this.props.mapData);\n        if(this.props.mapData.size > 0)\n        {\n            let namePrefix = this.props.seqFileName.substr(0,this.props.seqFileName.indexOf('.'));\n            if(namePrefix === \"\")\n                controlFileName = this.props.seqFileName + \".ctl\";\n            else\n                controlFileName = namePrefix + \".ctl\";\n\n            let text = createControlFileText(this.props.seqFileName,this.props.mapFileName,this.props.mapData,\n                                             this.props.sequenceData,this.props.speciesList,this.props.ctrlFileOpts,\n                                             this.props.numberSeqs,this.props.nTree,this.props.priors);\n\n            let blob = new Blob([text],{type: \"text/plain;charset=utf-8\"});\n\t    let downloadClick = (e) => { FileSaver.saveAs(blob,controlFileName); }\n\treturn (\n\t    <div className=\"downloadFile\">\n              <textarea className=\"ctrlFileBox\" readOnly wrap='off' value={text}/>\n              <div downLoadButton>\n\t      <label>Control file is ready for download: </label><button className=\"downButton\" onClick={downloadClick}>Download</button>\n              </div>\n            </div>\n            );\n            \n        }\n        else\n            return(\n                null\n            );\n    }\n}\n\nexport default CreateControlFile;\n","import React, { Component } from \"react\";\nimport \"./CtrlFile.css\";\n\nclass CtrlFileOptions extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n\n    render() {\n        const Checkbox = props => (\n            <input type=\"checkbox\" {...props} />\n        )\n        if(this.props.mapData.size > 0)\n        return(\n            <div className=\"options-box\">\n              <p>Control File Options</p>\n              <ul>\n              <form>\n                  <li>\n                    <label>\n                      <Checkbox\n                        checked={this.props.ctrlFileOpts.speciesDelim}\n                        onChange={this.props.handleSpecDelimCheckbox}\n                      />\n                      <span>Species Delimitation</span>\n                    </label>\n              </li>\n                <li>\n                  <label>\n                    <Checkbox\n                      checked={this.props.ctrlFileOpts.speciesTreeInf}\n                      onChange={this.props.handleSpecTreeInfCheckbox}\n                    />\n                    <span>Species Tree Inferred</span>\n                  </label>\n\n                </li>\n                <li>\n                  <label>\n                    <Checkbox\n                      checked={this.props.ctrlFileOpts.diploid}\n                      onChange={this.props.handleDiploidCheckbox}\n                    />\n                    <span>Diploid Sequence Data</span>\n                  </label>\n                </li>\n                <li>\n                  <label>\n                    <span>Burnin</span>\n                    <input onChange={this.props.handleBurninSet} name=\"burnin\" type=\"number\" min=\"1\" value={this.props.ctrlFileOpts.burnin} className=\"burninField\" />\n                  </label>\n                </li>\n                <li>\n                  <label>\n                    <span>Sampling Frequency</span>\n                    <input onChange={this.props.handleSampleFreqSet} name=\"sfreq\" type=\"number\" min=\"1\" value={this.props.ctrlFileOpts.sampleFreq} className=\"sFreqField\" />\n                  </label>\n                  </li>\n                  <li>\n                  <label>\n                    <span>MCMC Samples</span>\n                    <input onChange={this.props.handleMcmcSamples} name=\"mcmc\" type=\"number\" min=\"1\" value={this.props.ctrlFileOpts.mcmcSamples} className=\"mcmcField\" />\n                  </label>\n            </li>\n              </form>\n                </ul>\n\n\n\n            </div>\n        );\n        else\n            return( null )\n    }\n\n    \n}\n\nexport default CtrlFileOptions;\n","\nfunction recurseTree(tNode,newickSt)\n{\n    if(tNode==null) {\n       return;\n    }\n    var currNode=tNode;\n    if(currNode.left != null)\n    {\n        newickSt.newick += \"(\";\n        recurseTree(currNode.left,newickSt);\n     }\n    if(currNode.right != null)\n    {\n        newickSt.newick += \", \";\n        recurseTree(currNode.right,newickSt);\n        newickSt.newick += \")\";\n    }\n    if((currNode.left == null)&&(currNode.right == null))\n        newickSt.newick += currNode.name;\n}\n\nfunction newickFromTree(tNode)\n{\n    let treeSt={newick: \"\"};\n    recurseTree(tNode,treeSt);\n    return treeSt.newick;\n}\n\n/* code to generate random starting trees for control file  */\n\nfunction minNode(name, left, right, father) {\n   this.name = name;\n   this.left = left;\n   this.right = right;\n   this.father = father;\n}\n\n// use array to represent tips of tree\nfunction treeArray(tNode,tArray)\n{\n    if(tNode==null) return;\n    var currNode=tNode;\n    if(currNode.left != null)\n        treeArray(currNode.left,tArray);\n    if(currNode.right != null)\n        treeArray(currNode.right,tArray);\n    if((currNode.left == null)&&(currNode.right == null))\n        tArray.push(currNode);\n}\n\n// generate a random tree for ntax = speciesNames.length\nfunction randomTree(speciesNames)\n{\nvar treeList = [];\nlet tRoot = new minNode(\"root\",null,null,null);\ntRoot.left = new minNode(\"empty\",null,null,tRoot);\ntRoot.right = new minNode(\"empty\",null,null,tRoot);\ntreeArray(tRoot,treeList);\nwhile(treeList.length < speciesNames.length)\n{\n    let x=Math.floor((Math.random() * treeList.length));\n    treeList[x].left = new minNode(\"empty\", null, null,treeList[x]);\n    treeList[x].right = new minNode(\"empty\", null, null,treeList[x]);\n    treeList = [];\n    treeArray(tRoot,treeList);\n}\nfor(var i=0; i<treeList.length; i++)\n    treeList[i].name=speciesNames[i];\nreturn tRoot;\n}\n\nexport { randomTree, newickFromTree }\n","import React, { Component } from \"react\";\nimport { Columns, Column } from 'react-flex-columns';\nimport \"./CtrlFile.css\";\nimport CtrlFunc, { ParseMapText, MapFileUpload, getSpeciesList } from \"./CtrlFunc\";\nimport PriorFunc, { getSeqBySpecies, avgDistance, maxDistance, priorFromSeqs, getNumberSeqs, getMaxNumberSeqs } from \"./PriorFunc\";\nimport CreateControlFile from \"./CreateControlFile\";\nimport CtrlFileOptions from \"./CtrlFileOptions\";\nimport GetFile from \"./GetFile\";\nimport Trees, { randomTree, newickFromTree } from \"./Trees\";\nvar FileSaver = require('file-saver');\n\n\n    \nclass CtrlFile extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { mapData: [], mapFileName: '', ctrlFileOpts: { speciesDelim: false, speciesTreeInf: true, diploid: false,\n                                                                     burnin: 2000, sampleFreq: 2, mcmcSamples: 20000 },\n                       nTree: \"\", seqBySpecies: [], priors: { priorTheta: {a: 3.0, b: 0.002}, priorTau: {a: 3.0, b: 0.002}}, numberSeqs: [], speciesList: [] };\n\n        this.handleMapFileRead = this.handleMapFileRead.bind(this);\n        this.handleSpecDelimCheckbox = this.handleSpecDelimCheckbox.bind(this);\n        this.handleSpecTreeInfCheckbox = this.handleSpecTreeInfCheckbox.bind(this);\n        this.handleDiploidCheckbox = this.handleDiploidCheckbox.bind(this);\n        this.handleBurninSet = this.handleBurninSet.bind(this);\n        this.handleSampleFreqSet = this.handleSampleFreqSet.bind(this);\n        this.handleMcmcSamples = this.handleMcmcSamples.bind(this);\n    }\n\n    handleMapFileRead(fileContents,fileName)\n    {\n        console.log(ParseMapText(fileContents));\n        this.setState({ mapData: ParseMapText(fileContents) });\n        this.setState({ mapFileName: fileName });\n        this.setState({  speciesList: getSpeciesList(this.state.mapData)});\n        let rTree = randomTree(this.state.speciesList);\n        let nT = newickFromTree(rTree);\n        this.setState({ nTree: nT});\n        this.setState({ seqBySpecies: getSeqBySpecies(this.props.sequenceData, this.state.speciesList, this.state.mapData) });\n        this.setState({ priors: priorFromSeqs(this.state.seqBySpecies) });\n        let numSeqs ='';\n        for(let i in this.state.speciesList)\n          numSeqs += `${getMaxNumberSeqs(this.state.speciesList[i],this.props.sequenceData,this.state.mapData)}  `;\n        this.setState({ numberSeqs: numSeqs });\n        \n    }\n\n\n    handleSpecDelimCheckbox(e)\n    {\n        let cFO = {...this.state.ctrlFileOpts};\n        this.state.ctrlFileOpts.speciesDelim ? cFO.speciesDelim = false : cFO.speciesDelim = true;\n        this.setState({ ctrlFileOpts: cFO });\n    }\n\n    handleSpecTreeInfCheckbox(e)\n    {\n        let cFO = {...this.state.ctrlFileOpts};\n        this.state.ctrlFileOpts.speciesTreeInf ? cFO.speciesTreeInf = false : cFO.speciesTreeInf = true;\n        this.setState({ ctrlFileOpts: cFO });\n    }\n\n    handleDiploidCheckbox(e)\n    {\n        let cFO = {...this.state.ctrlFileOpts};\n        this.state.ctrlFileOpts.diploid ? cFO.diploid = false : cFO.diploid = true;\n        this.setState({ ctrlFileOpts: cFO });\n    }\n\n    handleBurninSet(e)\n    {\n        let cFO = {...this.state.ctrlFileOpts};\n        cFO.burnin = e.target.value;\n        this.setState({ ctrlFileOpts: cFO });\n    }\n\n    handleSampleFreqSet(e)\n    {\n        let cFO = {...this.state.ctrlFileOpts};\n        cFO.sampleFreq = e.target.value;\n        this.setState({ ctrlFileOpts: cFO });\n    }\n\n    handleMcmcSamples(e)\n    {\n        let cFO = {...this.state.ctrlFileOpts};\n        cFO.mcmcSamples = e.target.value;\n        this.setState({ ctrlFileOpts: cFO });\n    }\n\n\n    \n    \n\n    render() {\n        return (\n            <div>\n              <div className=\"mapfile-box\">\n                <h2>Step 3:</h2>\n                <p>Create a control file in bpp format. We will use the sequence data you uploaded to choose sensible defaults</p>\n                <Columns gutters stackMaxWidth={700}>\n                  <Column size={22}>\n\t            <MapFileUpload sequenceData={this.props.sequenceData} readFile={this.handleMapFileRead} />\n                    <CtrlFileOptions mapData={this.state.mapData} ctrlFileOpts={this.state.ctrlFileOpts}\n                                     handleSpecDelimCheckbox={this.handleSpecDelimCheckbox}\n                                     handleSpecTreeInfCheckbox={this.handleSpecTreeInfCheckbox}\n                                     handleDiploidCheckbox={this.handleDiploidCheckbox}\n                                     handleBurninSet={this.handleBurninSet}\n                                     handleSampleFreqSet={this.handleSampleFreqSet}\n                                     handleMcmcSamples={this.handleMcmcSamples}/>\n\n                  </Column>\n                  <Column size={35}>\n\n                    <CreateControlFile sequenceData={this.props.sequenceData} mapData={this.state.mapData} seqFileName={this.props.seqFileName}\n                                       mapFileName={this.state.mapFileName} ctrlFileOpts={this.state.ctrlFileOpts} speciesList={this.state.speciesList}\n                                       numberSeqs={this.state.numberSeqs} nTree={this.state.nTree} priors={this.state.priors}></CreateControlFile>\n\n\n                  </Column>\n                </Columns>\n              </div>\n              <div>\n\n              </div>\n              <div className=\"quick-start\"><p>Quick start: If step 1 is complete a link will appear above to upload a map file. Upload the mapfile\n                                             created in step 2 (or another mapfile conforming with the sequence data uploaded in step 1.</p></div>\n            </div>\n        );\n    }\n}\n\nexport default CtrlFile;\n","import React, { Component } from \"react\";\nimport {\n    Route,\n    NavLink,\n    HashRouter\n} from \"react-router-dom\";\nimport Sequences from \"./Sequences\";\nimport MapFile from \"./MapFile\";\nimport FormatSeqs, {formatSeqs, getCounts} from \"./FormatSeqs\";\nimport SeqRead from \"./SeqRead\";\nimport CtrlFile from \"./CtrlFile\";\n\nclass Main extends Component {\n    constructor() {\n        super();\n        this.state = { seqFiletext: '', sequenceData: [], locusArray: [], locusCounts: [], seqFileName: '' };\n        this.readFile = this.readFile.bind(this);\n    }\n    // callback function handles file read. Passed to Sequences then to GetSeqFile\n    readFile(currentText,fileName) {\n        let parseResult;\n        this.setState(()=>({seqFiletext: currentText }));\n        parseResult = SeqRead(currentText);\n        if(parseResult.error === null)    // input file parsed with no errors\n        {\n            this.setState(()=>({sequenceData: parseResult.sequenceData }));\n            this.setState(()=>({locusArray: formatSeqs(this.state.sequenceData) }));\n            this.setState(()=>({locusCounts: getCounts(this.state.sequenceData) }));\n            this.setState(()=>({seqFileName: fileName }));\n        }\n        else // input file parsing errors. Empty data and display error message.\n        {\n            alert(parseResult.error);\n            this.setState(()=>({sequenceData: [] }));\n            this.setState(()=>({locusArray: [\" \"] }));\n            this.setState(()=>({locusCounts: [] }));\n        }\n    }\n    \n    render() {\n        return (\n            <HashRouter>\n              <div>\n                <h1>Minimalist bpp</h1>\n                <ul className=\"header\">\n                  <li><NavLink to=\"/\">Upload Sequences</NavLink></li>\n                  <li><NavLink to=\"/MapFile\">Create Map File</NavLink></li>\n\t\t  <li><NavLink to=\"/CtrlFile\">Create Control File</NavLink></li>\n                </ul>\n                <div className=\"content\">\n                  <Route exact path=\"/\" render={(props) => <Sequences {...props} readFile={this.readFile} locusArray={this.state.locusArray} locusCounts={this.state.locusCounts}  /> } />\n                  <Route path=\"/MapFile\" render={(props) => <MapFile {...props} sequenceData={this.state.sequenceData} seqFileName={this.state.seqFileName}/> } />\n                  <Route path=\"/CtrlFile\" render={(props) => <CtrlFile {...props} sequenceData={this.state.sequenceData} seqFileName={this.state.seqFileName}/> } />\n                </div>\n              </div>\n            </HashRouter>              \n\n        );\n    }\n}\n\nexport default Main;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./Main\";\nimport \"./index.css\";\n\nReactDOM.render(\n    <Main/>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}