@startuml

class Main {
	+ state: seqFileText sequenceData locusArray locusCounts uniqSeqNames
	==
	ReadFile()
	--
	imports: SeqRead()
}

class SeqRead {
	==
	SeqRead()
	}

class Sequences {
	state: posInLocusArray
	..
	props: locusArray locusCounts ReadFile()
	==
	handleScanClickUp(e) handleScanClickDown(e) initPosInLocusArray()
	..
	UI: button(+) button(-)	
	}

class MapFile {
	state: seqMatches RegExp_SpName filters
	..
	props: sequenceData uniqSeqNames
	==
	addFilter()
	--
	imports: seqToSpecName()
	..
	UI: form_input form_input button(add)		
}

class GetSeqFile {
	state: uploadedFileContents waitingForFileUpload
	..
	props: initPosInLocusArray() readFile()
	..
	UI: input "file"		
		}

class DisplaySeqs {
	state:
	..
	props: locusText
	..
	UI: textarea		
}

class DisplayUnmatchedSeqs {
	state:
	..
	props: seqMatches
	==
	getUnmatchedAsString()
	..
	UI: textarea		
}

class DisplayFilters {
	state:
	..
	props: filters
	==
	createFilters()
	..
	UI: <ul> list		
}

class DisplayMatchedSeqs {
	state:
	..
	props: seqMatches
	==
	getMatchedAsString()		
	..
	UI: textarea
}
			

class FormatSeqs {
	==
	formatSeqs() getCounts()
}
			
class MapFunctions {
	==
	uniqueSeqNames() seqToSpecName()
}	
	
Main ---+ Sequences : locusArray \n locusCounts \n ReadFile()
Main ---|> MapFile : sequenceData \n uniqSeqNames
Sequences ---+ GetSeqFile : initPosInLocusArray() \n ReadFile()
Sequences --|> DisplaySeqs : locusText
MapFile --|> DisplayUnmatchedSeqs : seqMatches
MapFile --|> DisplayMatchedSeqs : seqMatches
MapFile --|> DisplayFilters : filters	
SeqRead ..> Main : SeqRead()
FormatSeqs ..> Main : formatSeqs() \n getCounts()
MapFunctions ..> Main : uniqueSeqNames()
MapFunctions ..> MapFile : seqToSpecName()		
@enduml
